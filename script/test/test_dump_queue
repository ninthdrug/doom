#!/bin/sh
LIBS=
for JAR in $DOOMHOME/lib/*.jar
do
  LIBS=$LIBS:$JAR
done
export JAVA_OPTS="-Dweblogic.ThreadPoolSize=400 -Dweblogic.ThreadPoolPercentSocketReaders=50 -Dweblogic.SelfTuningThreadPoolSizeMin=400 -Dweblogic.MaxMessageSize=20000000"
exec scala -cp $LIBS $0 $@
!#

import doom._

val servers = ConfigCache.servers filter { s =>
  List("admin", "managed").contains(s.servertype)
}

val list = servers map { server =>
  println(server.name)
  val user = "weblogic"
  val domainname = server.domainname
  val password = CredentialCache.getPassword("weblogic", domainname, user)
  try {
    val jmx = WeblogicJMX(server.address, server.port, "weblogic", password)
    val qstates = jmx.getJmsQueueStates(server.name) filter (_.messageCount > 0)
    jmx.close
    qstates
  } catch {
    case e: Exception =>
      e.printStackTrace
      println("Cannot get queue states from " + server.name)
      List()
  }
} filter (_.nonEmpty)

for (qs <- list) {
  val servername = qs.head.servername
  val queuenames = qs map (_.name.split("!").toList.last)
  for (queuename <- queuenames) {
    val filename = queuename + ".xml"
    WeblogicJMS.dumpQueue(servername, queuename, filename) match  {
      case (_, Some(e)) =>
        e.printStackTrace
        println("ERROR: dumping " + queuename)
      case (ids, None) =>
        println("OK: " + ids.size + " messages in " + queuename)
    }
  }
}

